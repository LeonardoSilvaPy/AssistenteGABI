from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import os

# Fun√ß√£o para o comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Sauda√ß√£o inicial e introdu√ß√£o ao agendamento presencial
    mensagem = "Ol√°! üòä Eu sou a Gabi, sua assistente virtual dedicada a apoiar profissionais da assist√™ncia social em Recife. Estou aqui para ajudar com informa√ß√µes sobre o Cadastro √önico, Bolsa Fam√≠lia, Benef√≠cios Eventuais, e outras orienta√ß√µes do SUAS. Como posso ajud√°-lo(a) hoje? ü§ó"
    await update.message.reply_text(mensagem)

# Fun√ß√£o para responder a qualquer outra mensagem ap√≥s o in√≠cio
async def resposta_padrao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Resposta fixa para qualquer pergunta ap√≥s a inicial
    mensagem = "Estou em fase de desenvolvimento, favor comparecer √† unidade mais pr√≥xima."
    await update.message.reply_text(mensagem)

# Fun√ß√£o principal para configurar e rodar o bot
def main():
    
    # Carrega as vari√°veis do arquivo .env
    load_dotenv()

    # Acessa o token da vari√°vel de ambiente
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

    # Cria√ß√£o do aplicativo com o token do bot carregado
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Adicionando handlers
    app.add_handler(CommandHandler("start", start))  # Handler do comando /start
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, resposta_padrao))  # Resposta padr√£o

    # Rodando o bot
    app.run_polling()

# Rodar o bot diretamente
if __name__ == "__main__":
    main()
